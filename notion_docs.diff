--- original_notion.ipynb
+++ fixed_notion.ipynb
@@ -60,7 +60,7 @@
    }
   ],
   "source": [
-    "%pip install --quiet -U langchain-community"
+    "%pip install --quiet -U langchain-notion"
   ]
  },
  {
@@ -70,7 +70,7 @@
    "source": [
     "### Credentials\n",
     "\n",
-    "This integration requires you to set NOTION_API_KEY as an environment variable to authenticate with the Discord API.\n",
+    "This integration requires you to set NOTION_API_KEY as an environment variable to authenticate with the Notion API.\n",
     "\n",
     "`export NOTION_API_KEY=\"your-notion-token\"`"
    ]
@@ -84,8 +84,8 @@
    "source": [
     "import getpass\n",
     "import os\n",
-    "\n",
-    "# if not os.environ.get(\"NOTION_API_KEY\"):\n",
-    "#     os.environ[\"NOTION_API_KEY\"] = getpass.getpass(\"NOTION API key:\\n\")"
+    "\n",
+    "if not os.environ.get(\"NOTION_API_KEY\"):\n",
+    "    os.environ[\"NOTION_API_KEY\"] = getpass.getpass(\"NOTION API key:\\n\")"
    ]
  },
  {
@@ -113,7 +113,7 @@
    "source": [
     "## Instantiation\n",
     "\n",
-    "Here we show how to instantiate an instance of the LangchainNotionToolkit tool, with"
+    "Here we show how to instantiate an instance of the LangchainNotionToolkit:"
    ]
  },
  {
@@ -121,34 +121,17 @@
    "execution_count": 19,
    "id": "2cf07fb4f1bca1a0",
    "metadata": {
-    "collapsed": true,
-    "jupyter": {
-     "outputs_hidden": true
-    }
    },
-   "outputs": [
-    {
-     "ename": "ModuleNotFoundError",
-     "evalue": "No module named 'langchain_notion'",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
-      "Cell \u001b[0;32mIn[19], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mlangchain_notion\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mtoolkits\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m LangchainNotionToolkit\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mlangchain_notion\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnotion_wrapper\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m NotionWrapper\n\u001b[1;32m      5\u001b[0m api \u001b[38;5;241m=\u001b[39m NotionWrapper(api_key\u001b[38;5;241m=\u001b[39mkey)\n",
-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'langchain_notion'"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "from langchain_notion.toolkits import LangchainNotionToolkit\n",
     "from langchain_notion.notion_wrapper import NotionWrapper\n",
     "\n",
-    "key = os.environ[\"NOTION_API_KEY\"]\n",
-    "api = NotionWrapper(api_key=key)\n",
+    "api = NotionWrapper(api_key=os.environ[\"NOTION_API_KEY\"])\n",
     "toolkit = LangchainNotionToolkit.from_notion_wrapper(api, include_write_tools=True)\n",
     "tools = toolkit.get_tools()\n",
     "\n",
-    "# search = next(t for t in tools if t.name == \"Search Pages\")\n",
-    "# print(search.invoke({\"tool_input\":\"test\"}))"
+    "# Inspect available tools\n",
+    "for t in tools:\n",
+    "    print(f\"- {t.name}: {t.description}\")"
    ]
  },
  {
@@ -168,7 +151,7 @@
    "outputs": [],
    "source": [
     "search_tool = next(t for t in tools if t.name == \"Search Pages\")\n",
-    "print(search_tool.invoke({\"tool_input\": \"test\"}))"
+    "print(search_tool.invoke({\"query\": \"test\"}))"
    ]
  },
  {
@@ -186,7 +169,7 @@
    "source": [
     "# This is usually generated by a model, but we'll create a tool call directly for demo purposes.\n",
     "model_generated_tool_call = {\n",
-    "    \"args\": {\"tool_input\": \"test\"},\n",
+    "    \"args\": {\"query\": \"test\"},\n",
     "    \"id\": \"1\",\n",
     "    \"name\": search_tool.name,\n",
     "    \"type\": \"tool_call\",\n",
@@ -200,12 +183,12 @@
    "metadata": {},
    "source": [
-    "## Chaining\n",
+    "## Use within an agent\n",
     "Below is a complete example showing how to integrate the **LangchainNotionToolkit** tools in an agent with an LLM.  \n",
     "This uses `create_react_agent` (from `langgraph.prebuilt`) to wire an agent that can call tools when appropriate.\n",
     "\n",
-    "`export NOTION_API_KEY=\"secret_...\"` (and optionally `NOTION_DATABASE_ID`)\n",
+    "Make sure you have set `NOTION_API_KEY` in your environment (and optionally `NOTION_DATABASE_ID`).\n",
     "\n",
     "Install: `pip install langchain-notion langgraph langchain-openai` (replace LLM as needed)\n"
    ]